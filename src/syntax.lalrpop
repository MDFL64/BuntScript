use std::str::FromStr;
use crate::front::ParserState;
use crate::middle::{Module,Function,ExprKind,BinOp,Symbol,Type,Stmt,Block,ExprHandle};

grammar(state: &mut ParserState);

Empty = ();

List<T>: Vec<T> = {
    Empty => vec!(),
    <mut v:(<T> ",")*> <e:T> => {
        v.push(e);
        v
    }
}

pub Module: Module = <items:Function*> => Module::new(items);

pub Function: Function = "function" <name:Symbol> "(" <args:List<Arg>> ")" <ret_ty: (":" <Type>)?> <body:Block> => {
    let exprs = std::mem::take(&mut state.exprs);
    let ret_ty = ret_ty.unwrap_or(Type::Void);
    Function::new(name,args,ret_ty,exprs,body)
};

Arg: (Symbol,Type) = <s:Symbol> ":" <t:Type> => (s,t);

Type: Type = {
    "number" => Type::Number,
    "boolean" => Type::Bool,
    "void" => Type::Void,
}

Block: Block = "{" <stmts:Stmt*> "}" => {
    Block{stmts}
};

Stmt: Stmt = {
    "let" <name:Symbol> <ty: (":" <Type>)?> <init: ("=" <Expr>)?> ";" => Stmt::new_let(name,None,init),
    <e:Expr> ";" => Stmt::Expr(e),
    <l:Expr> "=" <r:Expr> ";" => Stmt::Assign(l,r),
    <b:Block> => Stmt::Block(b),
    While,
    Return
}

While: Stmt = "while" <c:Expr> <b:Block> => Stmt::While(c,b);

Return: Stmt = {
    "return" <e:Expr?> ";" => Stmt::Return(e),
}

Term: ExprHandle = {
    <n:Num> => state.alloc_expr(ExprKind::Number(n)),
    <s:Symbol> => state.alloc_expr(ExprKind::Ident(s)),
    "(" <Expr> ")"
}

Expr: ExprHandle = {
    #[precedence(level="0")]
    Term,

    #[precedence(level="1")] #[assoc(side="left")]
    <l:Expr> "*" <r:Expr> => state.alloc_expr(ExprKind::Binary(l,BinOp::Mul,r)),
    <l:Expr> "/" <r:Expr> => state.alloc_expr(ExprKind::Binary(l,BinOp::Div,r)),
    <l:Expr> "%" <r:Expr> => state.alloc_expr(ExprKind::Binary(l,BinOp::Mod,r)),

    #[precedence(level="2")] #[assoc(side="left")]
    <l:Expr> "+" <r:Expr> => state.alloc_expr(ExprKind::Binary(l,BinOp::Add,r)),
    <l:Expr> "-" <r:Expr> => state.alloc_expr(ExprKind::Binary(l,BinOp::Sub,r)),

    #[precedence(level="3")] #[assoc(side="left")]
    <l:Expr> "<" <r:Expr> => state.alloc_expr(ExprKind::Binary(l,BinOp::Lt,r)),
    <l:Expr> ">" <r:Expr> => state.alloc_expr(ExprKind::Binary(l,BinOp::Gt,r)),
    <l:Expr> "<=" <r:Expr> => state.alloc_expr(ExprKind::Binary(l,BinOp::LtEq,r)),
    <l:Expr> ">=" <r:Expr> => state.alloc_expr(ExprKind::Binary(l,BinOp::GtEq,r)),
};

//If: ExprHandle = {
//    "if" <c:Expr> <t:Block> "else" <f:Block> => state.alloc_expr(ExprKind::If(c,t,Some(f)))
//}

Num: f64 = <s:r"[0-9]+"> => f64::from_str(s).unwrap();

Symbol: Symbol = <s:r"[_A-Za-z][_A-Za-z0-9]*"> => Symbol::new(s);
